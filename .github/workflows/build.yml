name: Run tests

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  LLVM_SHA_FILE: llvm-sha.txt
  LLVM_CACHE_NUMBER: 1  # Increase to reset cache

jobs:
  build_llvm_linux:
    name: Builds Linux LLVM/MLIR
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          echo "LLVM_SHA=$(cat $GITHUB_WORKSPACE/$LLVM_SHA_FILE)" >> $GITHUB_ENV

      - name: Cache LLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        with:
          path: |
            llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Setup env
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake clang lld
          pip install lit

      - name: Checkout LLVM
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_SHA }}
          path: llvm-mlir/llvm-project
          fetch-depth: 0

      - name: Build LLVM-MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        run: |
          pushd ${GITHUB_WORKSPACE}/llvm-mlir
          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          np=`nproc`
          echo "INFO: nproc $np"
          mkdir _build
          cd _build
          export CC=clang
          export CXX=clang++
          cmake ../llvm-project/llvm                                           \
            -GNinja                                                            \
            -DCMAKE_BUILD_TYPE=Release                                         \
            -DLLVM_ENABLE_PROJECTS="mlir"                                      \
            -DLLVM_ENABLE_ASSERTIONS=ON                                        \
            -DLLVM_INSTALL_UTILS=ON                                            \
            -DLLVM_TARGETS_TO_BUILD="X86;AMDGPU"                               \
            -DLLVM_ENABLE_BINDINGS=OFF                                         \
            -DLLVM_ENABLE_ZSTD=OFF                                             \
            -DMLIR_INCLUDE_TESTS=OFF                                           \
            -DLLVM_USE_LINKER=lld                                              \
            -DLLVM_DISTRIBUTION_COMPONENTS="llvm-headers;llvm-libraries;cmake-exports;FileCheck;count;not;mlir-headers;mlir-libraries;mlir-cmake-exports;mlir-tblgen" \
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install
          ninja install-distribution-stripped
          cp bin/FileCheck ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          cp bin/count ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          cp bin/not ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          popd

  test_linux:
    name: "Linux: (SHARED_LIBS: ${{ matrix.shared_libs }}) Run water tests"
    strategy:
      fail-fast: false
      matrix:
        shared_libs: ["ON", "OFF"]
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: build_llvm_linux

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup env
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake clang lld
          pip install lit

      - name: Setup Cache Vars
        run: |
          echo "LLVM_SHA=$(cat $GITHUB_WORKSPACE/$LLVM_SHA_FILE)" >> $GITHUB_ENV

      - name: Cache LLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        with:
          path: |
            llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}


      - name: Build water
        run: |
          export EXTERNAL_LIT=${GITHUB_WORKSPACE}/scripts/runlit.py
          export LLVM_DIR=${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install
          mkdir -p cmake_build
          cd cmake_build
          export CC=clang
          export CXX=clang++
          cmake ${GITHUB_WORKSPACE}                                            \
            -GNinja                                                            \
            -DCMAKE_BUILD_TYPE=Release                                         \
            -DLLVM_DIR=${LLVM_DIR}/lib/cmake/llvm                              \
            -DMLIR_DIR=${LLVM_DIR}/lib/cmake/mlir                              \
            -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }}                      \
            -DLLVM_EXTERNAL_LIT=${EXTERNAL_LIT}
          cmake --build .

      - name: Test water
        run: |
          cd cmake_build
          cmake --build . --target check-water


  test_linux_wheel:
    name: "Linux: test water wheel"
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: build_llvm_linux

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup env
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake clang lld
          pip install lit

      - name: Setup Cache Vars
        run: |
          echo "LLVM_SHA=$(cat $GITHUB_WORKSPACE/$LLVM_SHA_FILE)" >> $GITHUB_ENV

      - name: Cache LLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        with:
          path: |
            llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Build water wheel
        run: |
          cd ${GITHUB_WORKSPACE}/water/build_tools/wheel
          export WATER_MLIR_DIR=${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/lib/cmake/mlir
          python -m pip wheel .
